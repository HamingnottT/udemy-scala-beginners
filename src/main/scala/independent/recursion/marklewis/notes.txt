
Basic concept source:
https://www.youtube.com/watch?v=qeh2bbPqKaI&t=75s

Using factorial as an example:

The basic way of representing a factorial of n:
    
    n! = 1 * 2 * 3 * ... * n

This can be great for abstracting out the relationship idea, but there are more advanced ways to go about this:

         n
    n! = Πi
        i=1

Like using sumation notation, this notation represents repeated multiplication, still there is another way:

Recursive mathematical notation in of factorial:

            1               if n < 2    (base case)
         /
    n! = 
         \
            n * (n - 1)!     otherwise

The base case is critical for the recursive function to terminate its loop

Another example:

    f(n) = 1 + 4 + 9 + 16 + ... + n^2

    also represented as

           n
    f(n) = Σi^2
           i=1

    recursively represented as

              1                 if n > 2
            /
    f(n) =
            \
              n^2 + f(n - 1)    otherwise


As recursion the function calls itself, the condition of n gets closer and closer to the base case.
once the value of n reaches the base case the function terminates

~~~ Tracing Recursive Functions ~~~

source:
https://www.youtube.com/watch?v=3xO1F2Jj5kg&t=77s

Tracing is the process of going thru a program one line at a time to to find out what it is doing

Different from sequential execution where the program executes top-to-bottom

Using the factorial function as an example:

def factorial(n: Int): Int = { 
    if (n < 2) 1
    else n * factorial(n - 1)
}

What happens in the function is that the compiler evaluates n. If n is less than 2 then the function returns 1, 
otherwise if n is greater then 2, then it returns the value of n times the factorial function, but with value n - 1.

for factorial of 5:

frame 1:
    factorial(5)
    5 IS NOT less than 2
    so return 5 * factorial(4)

frame 2:
    factorial(4)
    4 IS NOT less than 2
    so return 4 * factorial(3)

frame 3:
    factorial(3)
    3 IS NOT less than 2
    so return 3 * factorial(2)

frame 4:
    factorial(2)
    2 IS NOT less than 2
    so return 2 * factorial(1)

frame 5:
    factorial(1)
    1 IS less than 2
    so return 1

At frame 5 the base case is reached, but the program still hasn't solved the 5 * factorial(5 - 1), yet.
But because the base case has been reached, the program can now work its way back up to solve for the original expression in frame 1.
In the following frames the expression from the previous factorial will be highlighted by brackets for readability.

frame 6:
    factorial(1)
    1

frame 7:
    factorial(2)
    2 * factorial(1)
    2 * [1]

frame 8:
    factorial(3)
    3 * factorial(2)
    3 * [2 * 1]

frame 9:
    factorial(4)
    4 * factorial(3)
    4 * [3 * 2 * 1]

frame 10:
    factorial(5)
    5 * factorial(4)
    5 * [4 * 3 * 2 * 1]

Now with factorial(4 evaluated), the function is now ready to solve.

the output will is [120]

This recursive pattern can be illustrated below:

    start  factorial(5)
    |     /
    |    /
    |   /
    |  /
    | /
    |factorial(1) = 1
    | \
    |  \
    |   \
    |    \
    |     \
    end    120

Another way of looking at this problem is through pure substitution. Similar to looking at the function frame-by-frame, 
this perspective also deconstructs the function's logic:

/!\ note substitution best works when you are working with numerical values and not Units

source:
https://www.youtube.com/watch?v=sl4H7PhUSWk

def factorial(n: Int): Int = if (n < 2) 1 else n * factorial(n - 1)


factorial(5)
Int = if (5 < 2) 1 else 5 * factorial(5 - 1)

5 * factorial(4)
5 * (if (4 < 2) 1 else 4 * factorial(4 - 1))

5 * (4 * factorial(3))
5 * 4 * (if (3 < 2) 1 else 3 * factorial(3 - 1))

5 * 4 * (3 * factorial(2))
5 * 4 * 3 * (if (2 < 2) 1 else 2 * factorial(2 - 1))

5 * 4 * 3 * (2 * factorial(1))
5 * 4 * 3 * 2 * ((1 < 2), so return 1)

5 * 4 * 3 * 2 * 1
120


~ Sum of squares example ~

def sumSquares(n: Int): Int = if(n < 2) 1 else n * n + sumSquares(n - 1)

- or -

def sumSquares(n: Int): Int = {
    if(n < 2) 1 
    else n * n + sumSquares(n - 1)
}

sumSquares(4)
if(4 < 2) 1 else 4 * 4 + sumSquares(4 - 1)

16 + sumSquares(3)
16 + (if(3 < 2) 1 else 3 * 3 + sumSquares(3 - 1))

16 + 9 + sumSquares(2)
16 + 9 + (if(2 < 2) 1 else 2 * 2 + sumSquares(2 - 1))

16 + 3 + 4 + sumSquares(1)
16 + 9 + 4 + ((1 < 2), so return 1)

16 + 9 + 4 + 1
30