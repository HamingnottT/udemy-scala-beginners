~~~ General Notes on Recursion ~~~

Source 1: https://www.youtube.com/watch?v=ngCos392W4w

~ Main Concepts ~

Recursion is all about taking a problem and using simpler versions of the problem.

Steps to take/Questions to ask:

1. What's the simplest possible input?
    - the simplest possible input becomes a base case for a recurive problem
        *A base case of a recursive function is the only case where we provide an explicit answer. 
            All other solutions to the problem will build on the base case.

2. Play around with examples and visualize!
    - this step involves trying out examples and visualizing how the inputs and outputs of these functions interact


3. Relate hard cases to simpler cases
    - or from step 2's context: relating larger examples to smaller examples

4. Generalize the pattern
    - you can Generalize a pattern by looking for the value that comes before it
    - eg. sum(k - 1), you need only to add k to find sum(k)
        - or sum(k) = sum(k - 1) + k
    ** this is the basis for recurive pattern

5. Write code by combining recurive pattern with the base case
    - take the generalization from step 4 and the relation of the prior steps to create a programmatic function to model this pattern

    def sum(n):
        if n == 0:
            return 0                    # this defines the base case
        else:
            return n + sum(n - 1)       # this defines all other solutions

~ Example problems ~

NOTE:
- These notes are program language agnostic
- it looks like Reducible uses Python

Example problem 1:

Write a recursive function that, given an input 'n', sums all non-negative integers up to 'n'.

Input:

sum(0) -> 0
sum(1) -> 0

sum(4) -> (1 + 2 + 3 + 4) -> 10
sum(n) -> (1 + 2 + 3 + 4 + ... + n)

Two approaches laid out:

i. Iterative

    def sum(n):
        result = 0
        for i in range(n + 1):
            result += i
        return result

    This approach iterates through the range of n in a for-loop.
    Variable 'result' is declared with a 0 value and then incremented by each value of 'i'.
    At the end of the loop the total value of 'result' is returned

ii. Mathematical

    def sum(n):
        return n * (n + 1) / 2 

    This approach simply evaluates the sum of n by constructing a arithmetical model

Using the 5 step method of recursion:

    1. What's the simplest possible input?
        sum(0) -> 0         # This is our base case

    2. Play around with examples and visualize!
        
        Visual:
        Example 1
        the sum(n) builds a triangle        @timestamp 2:10

        Example 2
        n = 1 -> 1 = [1]
        n = 2 -> 1 + 2 = [3]
        n = 3 -> 1 + 2 + 3 = [6]
        n = 4 -> 1 + 2 + 3 + 4 = [10]
        n = 5 -> 1 + 2 + 3 + 4 + 5 = [15] 
    
    3. Relate hard cases to simpler cases

        Can you find sum(6) from whats already presented?
        Can you relate sum(4) and sum(5)?
        Can you relate sum(3) and sum(4)?

    4. Generalize the pattern

        Assume you want to find the sum where n = k
            - to approach this you can use the concepts from step 3 and 2
                - this can be done by solving for n = k - 1, or sum(k - 1) that way we can add k to this value to find sum(k)
                
                sum(k) = sum(k - 1) + k

    5. Write code by combining recurive pattern with the base case

        - Using the model laid out, sum(k) = sum(k - 1) + k, we can now translate this to a programmatic function

        def sum(n):
            if n == 0:
                return 0
            else:
                return n + sum(n - 1)

        ~ Elaboration ~
        The way this code is executing is that it checks if the sum of n is the base case, for which it is not.
        It then return the value of 'n' but calls itself again on now with the value of n - 1.
        The function will then iterate through itself again returning the value of n - 1 plus now sum(n - 1 - 1).
        This continues until it reaches the base case.

        sum(5)

        ~ Dissecting the function logic through frames ~

        Frame 1:
        n = 5
        n - 1 = 4
        return 5 + sum(5 - 1)               
        
        #NOTE: sum(5 - 1) should give 10 but it hasn't been evaluated yet so it passes through the function again at frame 2

        Frame 2:
        n = 4
        n - 1 = 3
        return 4 + sum(4 - 1)

        Frame 3:
        n = 3
        n - 1 = 2
        return 3 + sum(3 - 1)

        Frame 4:
        n = 2
        n - 1 = 1
        return 2 + sum(2 - 1)

        Frame 5:
        n = 1
        n - 1 = 0
        return 1 + sum(1 - 1)

        Frame 6:
         n = 0
         return 0

        #Once the function hits the base case sum(0), the result of sum(0) (eg. 0) is then used to solve the sum function sum(1).
            This continues until sum(5) is solved, answer is shown in [].

        Frame 7:
        sum(1)
        1 + sum(0)
        1 + 0
        [1]

        Frame 8:
        sum(2)
        2 + sum(1)
        2 + 1
        [3]

        Frame 9:
        sum(3)
        3 + sum(2)
        3 + 3
        [6]

        Frame 10:
        sum(4)
        4 + sum(3)
        4 + 6
        [10]

        Frame 11:
        sum(5)
        5 + sum(4)
        5 + 10
        [15]


        Visual representation of reach frame:
        The function breaks down sum(n) until it reaches the base case,
        then builds back up by solving, starting from sum(0)
      
      start
        |     /
        |    /
        |   /
        |  /
        | /
        | \
        |  \
        |   \
        |    \
        |     \
       end

